#!/usr/bin/env node

// var connect = require( "connect" ),
var express = require( "express" ),
    fs = require( "fs" ),
    path = require( "path" ),
    cli = require( "cli" ).enable( "version", "status" );

// Parse out the arguments passed
cli.parse({
  log: [ "l", "Enable logging" ],
  port: [ "p", "Listen on this port", "number", 4242 ],
  build: [ "b", "Build static presentation", "string" ]
});

// Main function to execute
cli.main(function ( args, options ) {

  var http = require( "http" ),
      _ = require( "lodash" ),
      _s = require( "underscore.string" ),
      parseContent = require( "./middleware/parse-content" ),
      talkConfig = require( "./middleware/talk-config" ),
      // tests = require( "./middleware/tests" ),
      config = args[ 0 ],
      section = args[ 1 ],
      app, templates = {};

  if ( options.build ) {

    buildPath = ( args[ 1 ] ) ? args[ 1 ] : null;

    if ( buildPath === null ) {
      cli.fatal( "Build path not provided" );
    }

    // BUILD OUT STATIC PRESENTATION
    // To Do: Second day feature. Not necessary to make usable.

  } else {

    app = express();
    app.use( express.static( "app" ) );

    templates.error = fs.readFileSync( "app/node-templates/error.html" );
    templates.base = fs.readFileSync( "app/node-templates/base.html" );

    // base route, everything else is served through the static middleware
    app.get( "/", function ( req, res, next ) {
      // load up the config and get things running
      fs.readFile( config, function ( err, data ) {
        if ( err ) {
          res.end( _.template( templates.error, { message: "Config file \"" + config + "\" not found." } ) );
        } else {
          data = JSON.parse ( data );
          data.slugged_title = _s.slugify( data.title );
          res.end( _.template( templates.base, { config: JSON.stringify( data ) } ) );
        }
      });
    });

    app.get( "/api/content", parseContent, function ( req, res, next ) {
      res.end( res.locals.contentJSON );
    });

    app.get( "/api/content/config", talkConfig, function ( req, res, next ) {
      res.end( res.locals.talkConfig );
    });

    app.listen( options.port );

    cli.ok( "Listening on port " + options.port );
    cli.ok( "Using talk config: " + config );
  }
});
